<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yamamayumi9489 | アプリNaviブログ</title><link>https://blog.opuappnavi.com/authors/yamamayumi9489/</link><atom:link href="https://blog.opuappnavi.com/authors/yamamayumi9489/index.xml" rel="self" type="application/rss+xml"/><description>Yamamayumi9489</description><generator>Wowchemy (https://wowchemy.com)</generator><language>ja</language><image><url>https://blog.opuappnavi.com/authors/yamamayumi9489/avatar_hu4f3dc5c1e2d60e04af578bd2d7f59e90_8294454_270x270_fill_q75_lanczos_center.jpg</url><title>Yamamayumi9489</title><link>https://blog.opuappnavi.com/authors/yamamayumi9489/</link></image><item><title>正規表現</title><link>https://blog.opuappnavi.com/post/reguler-expression-introduce/</link><pubDate>Tue, 20 Sep 2022 20:00:00 +0900</pubDate><guid>https://blog.opuappnavi.com/post/reguler-expression-introduce/</guid><description>&lt;h1 id="はじめに">はじめに&lt;/h1>
&lt;p>　そこそこの分量のある文章を書いたとき、途中で「この漢字間違ってた！」とか「単位をmmじゃなくてcmにしていた！」となった経験はあるでしょうか。多少の修正ならばいいものの、修正箇所が多い場合、どこか分からない場合は非常に面倒なことになってしまいます。&lt;br>
　そんな時に有用なのが「検索と置換」という機能です。特定の文章を別の文章に一括で置き換えることができます。しかし、「約○○m」のように値を保持したまま前後に文章を追加するとなると一筋縄ではいきません。また、意図しない変更が起きてしまうのも避けたいところです。&lt;/p>
&lt;figure id="figure-意図しない変更が起きてしまう例">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./regexp_mistake.jpg" alt="意図しない変更が起きてしまう例" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
意図しない変更が起きてしまう例
&lt;/figcaption>&lt;/figure>
&lt;p>　このような問題は、「正規表現」と呼ばれるものを用いることで解決できるかもしれません。&lt;/p>
&lt;h1 id="正規表現とは">正規表現とは&lt;/h1>
&lt;p>　特定の条件を満たす文字列の集合を、１つの形式で表現する方法です。例えば &lt;code>\d{4}/\d{2}/\d{2}&lt;/code> と書くと &lt;code>2022/09/20&lt;/code> や &lt;code>1999/10/23&lt;/code> のように日付を表す文字列の集合を表しますし、&lt;code>[a-z]{5}&lt;/code> と書くと &lt;code>extra&lt;/code> や &lt;code>abcde&lt;/code> のような５文字の小文字アルファベットを表します。&lt;/p>
&lt;hr>
&lt;h2 id="メタ文字">メタ文字&lt;/h2>
&lt;p>　正規表現では、 &lt;code>.()[]{}/\*+-|?&lt;/code> 等の&lt;strong>メタ文字&lt;/strong>と呼ばれるものは特殊な意味を持ちます。また、メタ文字は組み合わせて複雑な正規表現を表すことができます。以下は主なメタ文字と正規表現の例です。&lt;/p>
&lt;h4 id="-ドット">. （ドット）&lt;/h4>
&lt;p>改行を除く任意の１文字を表します。&lt;br>
&lt;code>あ.こ&lt;/code> は &lt;code>あいこ&lt;/code> &lt;code>あいす&lt;/code> &lt;code>あXこ&lt;/code> 等が当てはまります。&lt;/p>
&lt;h4 id="-プラス">+ （プラス）&lt;/h4>
&lt;p>直前の文字が１文字以上続くことを表します。&lt;br>
&lt;code>go+gle&lt;/code> は &lt;code>gogle&lt;/code> &lt;code>google&lt;/code> &lt;code>goooooogle&lt;/code> 等が当てはまります。&lt;/p>
&lt;h4 id="-アスタリスク">* （アスタリスク）&lt;/h4>
&lt;p>直前の文字が&lt;strong>0文字&lt;/strong>以上続くことを表します。&lt;br>
&lt;code>かた*き&lt;/code> は &lt;code>かき&lt;/code> &lt;code>かたき&lt;/code> &lt;code>かたたたき&lt;/code> 等が当てはまります。&lt;/p>
&lt;h4 id="-クエスチョンマーク">? （クエスチョンマーク）&lt;/h4>
&lt;p>直前の文字が0文字か1文字あることを表します。&lt;br>
&lt;code>100億?円&lt;/code> は &lt;code>100円&lt;/code> と &lt;code>100億円&lt;/code> が当てはまります。&lt;/p>
&lt;h4 id="-丸括弧">() （丸括弧）&lt;/h4>
&lt;p>複数文字の表現をグループ化することができます。&lt;br>
&lt;code>(ひい)*おじいちゃん&lt;/code> は &lt;code>おじいちゃん&lt;/code> &lt;code>ひいひいおじいちゃん&lt;/code> 等が当てはまります。&lt;/p>
&lt;h4 id="-パイプ">| （パイプ）&lt;/h4>
&lt;p>複数表現のいずれかを表します。&lt;br>
&lt;code>good (morning|afternoon|night)&lt;/code> は &lt;code>good morning&lt;/code> &lt;code>good afternoon&lt;/code> &lt;code>good night&lt;/code> が当てはまります。&lt;/p>
&lt;h4 id="-角括弧">[] （角括弧）&lt;/h4>
&lt;p>括弧内の文字のいずれかを表します。アルファベットやひらがな、数字などは &lt;code>A-Z&lt;/code> 、 &lt;code>a-z&lt;/code> 、 &lt;code>か-こ&lt;/code> 、 &lt;code>0-9&lt;/code> のように省略することもできます。&lt;br>
&lt;code>[aiueo]+&lt;/code> は &lt;code>oue&lt;/code> &lt;code>ai&lt;/code> のように母音だけで表される１文字以上の文字列が当てはまります。&lt;/p>
&lt;h4 id="-波括弧">{} （波括弧）&lt;/h4>
&lt;p>直前の文字が連続する回数を制限します。 &lt;code>{n}&lt;/code> はn回、 &lt;code>{n,m}&lt;/code> はn回以上m回以下繰り返すことを表します。 &lt;code>[1-9][0-9]{5}&lt;/code> は &lt;code>123456&lt;/code> &lt;code>314159&lt;/code> のような６桁の数字を表します。&lt;/p>
&lt;p>　なお、これらメタ文字自身を正規表現で表すときは &lt;code>\&lt;/code> （バックスラッシュ）をメタ文字の前に付けて表します。&lt;/p>
&lt;hr>
&lt;h2 id="エスケープシーケンス">エスケープシーケンス&lt;/h2>
&lt;p>　正規表現の中でバックスラッシュはメタ文字をただの文字として扱うために用いられますが、いくつかのアルファベットの前につけることで別の使い方をすることができます。以下はその数例です。&lt;/p>
&lt;h4 id="d">&lt;code>\d&lt;/code>&lt;/h4>
&lt;p>&lt;code>[0-9]&lt;/code> と同じ意味で、任意のアラビア数字１文字を表します。&lt;/p>
&lt;h4 id="w">&lt;code>\w&lt;/code>&lt;/h4>
&lt;p>&lt;code>[0-9a-zA-Z_]&lt;/code> と同じ意味で、アルファベット、アラビア数字、アンダースコア &lt;code>_&lt;/code> のうち任意の１文字を表します。&lt;/p>
&lt;h4 id="r">&lt;code>\R&lt;/code>&lt;/h4>
&lt;p>全ての改行コードのうちいずれかを表します。&lt;/p>
&lt;h4 id="s">&lt;code>\s&lt;/code>&lt;/h4>
&lt;p>半角スペース、タブ、改行などの空白文字のうちいずれかを表します。&lt;/p>
&lt;h4 id="s-1">&lt;code>\S&lt;/code>&lt;/h4>
&lt;p>&lt;code>\s&lt;/code> で表されるもの以外の任意の文字を表します。同様に、 &lt;code>\D&lt;/code> は数字以外、 &lt;code>\W&lt;/code> はアルファベット、数字、アンダースコア以外の文字を表します。&lt;/p>
&lt;hr>
&lt;h2 id="キャプチャと後方参照">キャプチャと後方参照&lt;/h2>
&lt;p>　丸括弧を使うと正規表現のグループ化ができますが、正規表現に当てはまる文字列を見つけた際に括弧内の表現を保持することができます。&lt;/p>
&lt;p>　例えば、この記事の最初のように４桁の標高「○○m」を「約○○M」と置換することを考えます。４桁の標高は &lt;code>[1-9]\d{3}m&lt;/code> という正規表現で表されます。この数字部分を丸括弧に入れる、すなわち &lt;code>([1-9]\d{3})m&lt;/code> という正規表現にすると、各標高の値を保持できます。&lt;br>
　保持した表現を用いるには &lt;code>$n&lt;/code> を用います（注：ものによって &lt;code>\n&lt;/code> を用いることもあります。どちらを用いるかは使うもの毎に確認をお願いします）。ここで &lt;code>n&lt;/code> は、正規表現にある何番目の括弧の表現を用いるかによって変わります。今回は括弧は１つしか使用していないため、置換後の文字列を表す正規表現は &lt;code>約$1M&lt;/code> となります。実際にやってみましょう。&lt;/p>
&lt;p>
&lt;figure id="figure-置換前">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./regexp_before.jpg" alt="置換前" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
置換前
&lt;/figcaption>&lt;/figure>
&lt;figure id="figure-置換後">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./regexp_after.jpg" alt="置換後" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
置換後
&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;p>　無事、ローマ字表記を崩さずに標高の表記だけを変えることができました！&lt;/p>
&lt;h1 id="まとめ">まとめ&lt;/h1>
&lt;p>　正規表現を用いることで、面倒な置換作業を楽に行うことができます。今回紹介した正規表現以外にも便利な記法がたくさんあります。正規表現は置換作業の簡略化以外にも、パスワードや住所等を入力するフォームで入力形式が正しいか確認したりすることもできます。正規表現はとても奥が深いので、興味を持った方はぜひ調べてみることをお勧めします。&lt;/p></description></item></channel></rss>