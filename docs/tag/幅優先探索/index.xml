<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>幅優先探索 | アプリNaviブログ</title><link>https://blog.opuappnavi.com/tag/%E5%B9%85%E5%84%AA%E5%85%88%E6%8E%A2%E7%B4%A2/</link><atom:link href="https://blog.opuappnavi.com/tag/%E5%B9%85%E5%84%AA%E5%85%88%E6%8E%A2%E7%B4%A2/index.xml" rel="self" type="application/rss+xml"/><description>幅優先探索</description><generator>Wowchemy (https://wowchemy.com)</generator><language>ja</language><lastBuildDate>Sat, 24 Sep 2022 20:30:00 +0900</lastBuildDate><image><url>https://blog.opuappnavi.com/media/icon_hude4548ff0fbec708553074fd5e552c37_155941_512x512_fill_lanczos_center_3.png</url><title>幅優先探索</title><link>https://blog.opuappnavi.com/tag/%E5%B9%85%E5%84%AA%E5%85%88%E6%8E%A2%E7%B4%A2/</link></image><item><title>迷路の自動生成と自動探索（Unity）</title><link>https://blog.opuappnavi.com/post/syota-kawaguchi-2022/</link><pubDate>Sat, 24 Sep 2022 20:30:00 +0900</pubDate><guid>https://blog.opuappnavi.com/post/syota-kawaguchi-2022/</guid><description>&lt;h1 id="はじめに">はじめに&lt;/h1>
&lt;p>夏休みにアプリNaviでAdvent Calendar的なものをすることになり、Unityで迷路の自動生成と自動探索を実装してみましたので、今回はそれを記事に書いていこうと思います。(といっても他の記事からロジックを拝借して実装しただけですが&amp;hellip;)&lt;/p>
&lt;h1 id="迷路の自動生成">迷路の自動生成&lt;/h1>
&lt;p>まず迷路の自動生成を行います。迷路の自動生成は以下の記事から棒倒し法のロジックを拝借いたしました。棒倒し法で生成した迷路をUnityで実体化しております。&lt;br>
棒倒し法について知りたい方は以下の記事を参考にしてください。&lt;/p>
&lt;p>&lt;a href="https://algoful.com/Archive/Algorithm/MazeExtend" target="_blank" rel="noopener">アルゴリズム初心者向けの基礎と入門(C#, Pythonとか)&lt;/a>&lt;/p>
&lt;h1 id="迷路の自動探索">迷路の自動探索&lt;/h1>
&lt;p>続いて迷路の探索について書いていきます。&lt;br>
迷路の探索ロジックは以下の２つが有名です。&lt;/p>
&lt;ul>
&lt;li>深さ優先探索(Depth First)&lt;/li>
&lt;li>幅優先探索(Breadth First)&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="深さ優先探索">深さ優先探索&lt;/h2>
&lt;p>　深さ優先探索ではStackというデータ構造を使います。Stackはデータの出し入れが後入れ先出し方式(Last In First Out)となっております。&lt;br>
　例えば皿洗いをしている際、洗い終わった皿を上に積んでいくとします。皿を洗い終わったあと棚にしまう際、お皿の上からしまうと思います。最後に洗い終わった皿からしまうので「後入れ先出し」というわけです。&lt;br>
　なお、Stackにデータを入れることをPush、データを取り出すことをPopといいます。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="画像" srcset="
/post/syota-kawaguchi-2022/LastInFirstOut_huabb40cf8f270c816af22caf875704285_254584_a68224e191b6da23d5e97cb1e5545e1c.webp 400w,
/post/syota-kawaguchi-2022/LastInFirstOut_huabb40cf8f270c816af22caf875704285_254584_287ecef22201b31734505dd1df1f472e.webp 760w,
/post/syota-kawaguchi-2022/LastInFirstOut_huabb40cf8f270c816af22caf875704285_254584_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://blog.opuappnavi.com/post/syota-kawaguchi-2022/LastInFirstOut_huabb40cf8f270c816af22caf875704285_254584_a68224e191b6da23d5e97cb1e5545e1c.webp"
width="760"
height="428"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>深さ優先探索のアルゴリズムは以下のとおりです&lt;/p>
&lt;ol>
&lt;li>現在地をすでに通ったマスに設定後、現在地から移動可能なマス(壁ではない＆すでに通ったマスではない)を取得する。(マスが見つかり次第、移動可能なマスの探索は終了する)&lt;/li>
&lt;li>進めるマスがあれば現在地をStackにPushし、現在地を1で取得したマスに変更する。&lt;/li>
&lt;li>進めるマスがなければスタックからPopし、そのマスを現在地とする。(前のマスに戻る処理)&lt;/li>
&lt;li>ゴールするまで1 ~ 3を繰り返す&lt;/li>
&lt;/ol>
&lt;p>なお、深さ優先探索の実装ではStackの中身が0個になった時点でゴールまでのルートなしとして処理を止めています。&lt;/p>
&lt;p>迷路の経路に探索される順番を割り当てると以下の図のようになります。(方向の優先度は適当)&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="画像" srcset="
/post/syota-kawaguchi-2022/DepthFirst_hu214f3ce13b0fc97822fefa89111c7ec5_11310_e1037dcd310ff69e8f5b9a7906c2494e.webp 400w,
/post/syota-kawaguchi-2022/DepthFirst_hu214f3ce13b0fc97822fefa89111c7ec5_11310_19e65fe38f899951796dd8ebbe3aee79.webp 760w,
/post/syota-kawaguchi-2022/DepthFirst_hu214f3ce13b0fc97822fefa89111c7ec5_11310_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://blog.opuappnavi.com/post/syota-kawaguchi-2022/DepthFirst_hu214f3ce13b0fc97822fefa89111c7ec5_11310_e1037dcd310ff69e8f5b9a7906c2494e.webp"
width="270"
height="279"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>図より行き止まりまでまっすぐに探索していることがわかると思います。&lt;br>&lt;/p>
&lt;p>深さ優先探索では次のような特徴があります。&lt;/p>
&lt;ul>
&lt;li>迷路と探索の優先度によって早く経路を求めることができる&lt;/li>
&lt;li>メモリの消費量が少ない。&lt;/li>
&lt;li>迷路と探索の優先度によって計算時間が大きくなる。&lt;/li>
&lt;li>求めた経路が最短経路であるとは限らない&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="幅優先探索">幅優先探索&lt;/h2>
&lt;p>　
　幅優先探索ではQueue(キュー)というデータ構造を使います。Queueはデータの出し入れが先入れ先出し方式(First In First Out)となっております。&lt;br>
　コンビニやスーパーのレジをイメージするとわかりやすいと思います。レジでは先に並んだお客さんから精算されますが、Queueもデータを取り出す際、先に入れられたデータから取り出されます。
　なお、Queueにデータを入れることをEnqueue(エンキュー)、データを取り出すことをDequeue(デキュー)と言います。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="画像" srcset="
/post/syota-kawaguchi-2022/Queue_hu789c7561cf84da3a05931861506322e6_175845_c0084cdd14aaae5ddd828d638a988320.webp 400w,
/post/syota-kawaguchi-2022/Queue_hu789c7561cf84da3a05931861506322e6_175845_a1888890ff01e5902a0bb6c945dcc7a9.webp 760w,
/post/syota-kawaguchi-2022/Queue_hu789c7561cf84da3a05931861506322e6_175845_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://blog.opuappnavi.com/post/syota-kawaguchi-2022/Queue_hu789c7561cf84da3a05931861506322e6_175845_c0084cdd14aaae5ddd828d638a988320.webp"
width="550"
height="321"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>幅優先探索のアルゴリズムは以下のとおりです。&lt;/p>
&lt;ol>
&lt;li>現在地をすでに通ったマスに設定後、現在地から移動可能なマスをすべて取得する。&lt;/li>
&lt;li>取得した移動可能なマスをすべてQueueに格納する。このとき、移動可能なマスがどこマスから来たのか記録しておく。(のちに最短経路を求める際に利用)&lt;/li>
&lt;li>Queueからマスを一つ取り出し、現在地とする。&lt;/li>
&lt;li>ゴールするまで1~3を繰り返す。&lt;/li>
&lt;/ol>
&lt;p>なお、深さ優先探索と同様Queueの中身が0個になった時点でゴールまでのルートなしとして処理を止めています。&lt;/p>
&lt;p>迷路の経路に幅優先探索で探索される順番を割り当てると以下の図のようになります。(方向の優先度は適当)&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="画像" srcset="
/post/syota-kawaguchi-2022/BreadthFirst_hu93ce28bb9d6af05f9bdbdc0650f5351a_9692_610dc635a0e1b9187642e4ac0f0ee182.webp 400w,
/post/syota-kawaguchi-2022/BreadthFirst_hu93ce28bb9d6af05f9bdbdc0650f5351a_9692_7ff90f07d78b1bdcde89f28d4d0cd2e8.webp 760w,
/post/syota-kawaguchi-2022/BreadthFirst_hu93ce28bb9d6af05f9bdbdc0650f5351a_9692_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://blog.opuappnavi.com/post/syota-kawaguchi-2022/BreadthFirst_hu93ce28bb9d6af05f9bdbdc0650f5351a_9692_610dc635a0e1b9187642e4ac0f0ee182.webp"
width="270"
height="279"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>図よりスタート地点から広がっていくように探索されていることがわかると思います。&lt;/p>
&lt;p>幅優先探索では次のような特徴があります。&lt;/p>
&lt;ul>
&lt;li>安定した時間で経路を求めることができる。&lt;/li>
&lt;li>常に最短経路を求めることができる。&lt;/li>
&lt;li>迷路によっては計算時間が大きくなる(複雑な地形や大きな迷路など)。&lt;/li>
&lt;li>メモリの消費量が大きい&lt;/li>
&lt;/ul>
&lt;h1 id="実装">実装&lt;/h1>
&lt;p>まず、棒倒し法をつかって迷路の自動生成をしていきます。int型の２次元配列で返すようにしています。0を通路、1を壁としています。&lt;/p>
&lt;details>
&lt;summary>コード&lt;/summary>
&lt;pre>&lt;code class="language-C#">using System;
using System.Text;
using UnityEngine;
public class Maze
{
const int PATH = 0;
const int WALL = 1;
public static int[,] Generate(int width, int height) {
// 5未満のサイズでは生成できない
if (height &amp;lt; 5 || width &amp;lt; 5) throw new ArgumentOutOfRangeException();
if (width % 2 == 0) width++;
if (height % 2 == 0) height++;
// 指定サイズで生成し外周を壁にする
var maze = new int[width, height];
for (int x = 0; x &amp;lt; width; x++)
for (int y = 0; y &amp;lt; height; y++)
if (x == 0 || y == 0 || x == width - 1 || y == height - 1)
maze[x, y] = WALL; // 外周はすべて壁
else
maze[x, y] = PATH; // 外周以外は通路
// 棒を立て、倒す
var rnd = new System.Random();
for (int x = 2; x &amp;lt; width - 1; x += 2) {
for (int y = 2; y &amp;lt; height - 1; y += 2) {
maze[x, y] = WALL; // 棒を立てる
// 倒せるまで繰り返す
while (true) {
// 1行目のみ上に倒せる
int direction;
if (y == 2)
direction = rnd.Next(4);
else
direction = rnd.Next(3);
// 棒を倒す方向を決める
int WALLX = x;
int WALLY = y;
switch (direction) {
case 0: // 右
WALLX++;
break;
case 1: // 下
WALLY++;
break;
case 2: // 左
WALLX--;
break;
case 3: // 上
WALLY--;
break;
}
// 壁じゃない場合のみ倒して終了
if (maze[WALLX, WALLY] != WALL) {
maze[WALLX, WALLY] = WALL;
break;
}
}
}
}
return maze;
}
public static void DebugPrint(int[,] maze) {
StringBuilder sb = new StringBuilder();
for (int y = maze.GetLength(0) - 1; 0 &amp;lt;= y; y--) {
for (int x = 0; x &amp;lt; maze.GetLength(1); x++) {
sb.Append($&amp;quot;{maze[x, y]}, &amp;quot;);
}
sb.Append(&amp;quot;\n&amp;quot;);
}
Debug.Log(sb);
}
}
&lt;/code>&lt;/pre>
&lt;/details>
&lt;br>
&lt;p>つづいて探索の実装です。深さ優先探索、幅優先探索をそれぞれ実装しています。&lt;/p>
&lt;details>
&lt;summary>コード&lt;/summary>
&lt;pre>&lt;code class="language-C#">using System.Collections;
using System.Collections.Generic;
using System;
using UnityEngine;
public class Searcher
{
const int PATH = 0;
const int WALL = 1;
const int GOAL = 2;
const int ALREADYPASS = 1;
private int[,] maze;
//通過した経路を記録する配列。
//0:通過していない通路, 1:通過した通路または壁
int[,] passedCells;
public Searcher(int[,] maze) {
this.maze = maze;
passedCells = new int[maze.GetLength(0), maze.GetLength(1)];
}
//深さ優先探索
public Tuple&amp;lt;int, int&amp;gt;[] DepthFirst(Tuple&amp;lt;int, int&amp;gt; startPos, Tuple&amp;lt;int, int&amp;gt; goal) {
if (maze[startPos.Item1, startPos.Item2] != PATH) {
throw new Exception(&amp;quot;開始地点が通路ではありません&amp;quot;);
}
if (maze[goal.Item1, goal.Item2] != PATH) {
throw new Exception(&amp;quot;ゴールが通路ではありません&amp;quot;);
}
var stack = new Stack&amp;lt;Tuple&amp;lt;int, int&amp;gt;&amp;gt;();
var currentPos = startPos;
maze[goal.Item1, goal.Item2] = GOAL;
Array.Copy(maze, passedCells, maze.Length);
while (true) {
passedCells[currentPos.Item1, currentPos.Item2] = 1;
var nextPos = GetCandidate(currentPos);
Maze.DebugPrint(passedCells);
if (nextPos == null) {
if (stack.Count == 0) break;
currentPos = stack.Pop();
continue;
}
stack.Push(currentPos);
currentPos = nextPos;
if (maze[currentPos.Item1, currentPos.Item2] == GOAL) {
stack.Push(currentPos);
break;
}
}
var route = stack.ToArray();
Array.Reverse(route);
return route;
}
//幅優先探索
public Tuple&amp;lt;int, int&amp;gt;[] BreadthFirst(Tuple&amp;lt;int, int&amp;gt; startPos, Tuple&amp;lt;int, int&amp;gt; goal) {
if (maze[startPos.Item1, startPos.Item2] != PATH) {
throw new Exception(&amp;quot;開始地点が通路ではありません&amp;quot;);
}
if (maze[goal.Item1, goal.Item2] != PATH) {
throw new Exception(&amp;quot;ゴールが通路ではありません&amp;quot;);
}
var isGoal = false;
var queue = new Queue&amp;lt;Tuple&amp;lt;int, int&amp;gt;&amp;gt;();
//進めるマスがどこから来たか記録する辞書型
var dict = new Dictionary&amp;lt;Tuple&amp;lt;int, int&amp;gt;, Tuple&amp;lt;int, int&amp;gt;&amp;gt;();
var currentPos = startPos;
maze[goal.Item1, goal.Item2] = GOAL;
Array.Copy(maze, passedCells, maze.Length);
while (true) {
passedCells[currentPos.Item1, currentPos.Item2] = 1;
var candidates = GetCandidates(currentPos);
foreach (var candidate in candidates) {
queue.Enqueue(candidate);
dict[candidate] = currentPos;
}
if (queue.Count == 0) break;
currentPos = queue.Dequeue();
if (maze[currentPos.Item1, currentPos.Item2] == GOAL) {
isGoal = true;
break;
}
}
var route = new List&amp;lt;Tuple&amp;lt;int, int&amp;gt;&amp;gt;();
while (isGoal) {
route.Insert(0, currentPos);
if (currentPos == startPos) break;
currentPos = dict[currentPos];
}
return route.ToArray();
}
//現在地から移動可能なマスを取得する
private Tuple&amp;lt;int, int&amp;gt; GetCandidate(Tuple&amp;lt;int, int&amp;gt; cell) {
if (IsNotWALL(cell.Item1 + 1, cell.Item2) &amp;amp;&amp;amp; !IsAlreadyPassed(cell.Item1 + 1, cell.Item2)) return new Tuple&amp;lt;int, int&amp;gt;(cell.Item1 + 1, cell.Item2);
if (IsNotWALL(cell.Item1, cell.Item2 + 1) &amp;amp;&amp;amp; !IsAlreadyPassed(cell.Item1, cell.Item2 + 1)) return new Tuple&amp;lt;int, int&amp;gt;(cell.Item1, cell.Item2 + 1);
if (IsNotWALL(cell.Item1 - 1, cell.Item2) &amp;amp;&amp;amp; !IsAlreadyPassed(cell.Item1 - 1, cell.Item2)) return new Tuple&amp;lt;int, int&amp;gt;(cell.Item1 - 1, cell.Item2);
if (IsNotWALL(cell.Item1, cell.Item2 - 1) &amp;amp;&amp;amp; !IsAlreadyPassed(cell.Item1, cell.Item2 - 1)) return new Tuple&amp;lt;int, int&amp;gt;(cell.Item1, cell.Item2 - 1);
return null;
}
private List&amp;lt;Tuple&amp;lt;int, int&amp;gt;&amp;gt; GetCandidates(Tuple&amp;lt;int, int&amp;gt; cell) {
var result = new List&amp;lt;Tuple&amp;lt;int, int&amp;gt;&amp;gt;();
if (IsNotWALL(cell.Item1 + 1, cell.Item2) &amp;amp;&amp;amp; !IsAlreadyPassed(cell.Item1 + 1, cell.Item2)) result.Add(new Tuple&amp;lt;int, int&amp;gt;(cell.Item1 + 1, cell.Item2));
if (IsNotWALL(cell.Item1, cell.Item2 + 1) &amp;amp;&amp;amp; !IsAlreadyPassed(cell.Item1, cell.Item2 + 1)) result.Add(new Tuple&amp;lt;int, int&amp;gt;(cell.Item1, cell.Item2 + 1));
if (IsNotWALL(cell.Item1 - 1, cell.Item2) &amp;amp;&amp;amp; !IsAlreadyPassed(cell.Item1 - 1, cell.Item2)) result.Add(new Tuple&amp;lt;int, int&amp;gt;(cell.Item1 - 1, cell.Item2));
if (IsNotWALL(cell.Item1, cell.Item2 - 1) &amp;amp;&amp;amp; !IsAlreadyPassed(cell.Item1, cell.Item2 - 1)) result.Add(new Tuple&amp;lt;int, int&amp;gt;(cell.Item1, cell.Item2 - 1));
return result;
}
private bool IsNotWALL(int x, int y) {
return (0 &amp;lt;= x &amp;amp;&amp;amp; x &amp;lt; maze.GetLength(0)) &amp;amp;&amp;amp; (0 &amp;lt;= y &amp;amp;&amp;amp; y &amp;lt; maze.GetLength(1)) &amp;amp;&amp;amp; maze[x, y] != WALL;
}
private bool IsAlreadyPassed(int x, int y) {
return passedCells[x, y] == ALREADYPASS;
}
}
&lt;/code>&lt;/pre>
&lt;/details>
&lt;br>
&lt;p>最後に呼び出し側の実装です。まず、Mazeクラスから迷路の作成結果を受け取り、オブジェクトを配置しています。配置が完了すると自動探索でゴールまでの経路を導き、受け取った経路をもとにPlayerオブジェクトを動かしています。&lt;/p>
&lt;details>
&lt;summary>コード&lt;/summary>
&lt;pre>&lt;code class="language-C#">using System.Collections;
using System.Collections.Generic;
using System;
using UnityEngine;
enum Mode {
DepthFirst,
BreadthFirst
}
public class Generator : MonoBehaviour
{
[SerializeField] private Mode mode = Mode.DepthFirst;
int[,] maze;
[SerializeField] private int width = 7;
[SerializeField] private int height = 7;
[SerializeField] private GameObject wall;
[SerializeField] private GameObject playerPrefab;
const int PATH = 0;
const int WALL = 1;
IEnumerator Start()
{
var maze = Maze.Generate(width, height);
Debug.Log(&amp;quot;Maze is generated&amp;quot;);
Maze.DebugPrint(maze);
yield return StartCoroutine(GenerateStage(maze));
var searcher = new Searcher(maze);
var startPos = new Tuple&amp;lt;int, int&amp;gt;(1, 1);
var goalPos = new Tuple&amp;lt;int, int&amp;gt;(5, 5);
var route = mode == Mode.DepthFirst ?
searcher.DepthFirst(startPos, goalPos) :
searcher.BreadthFirst(startPos, goalPos);
Debug.Log($&amp;quot;route length : {route.Length}&amp;quot;);
foreach(var cell in route) {
Debug.Log($&amp;quot;x:{cell.Item1}, y:{cell.Item2}&amp;quot;);
}
yield return StartCoroutine(Go(route));
}
private IEnumerator GenerateStage(int[,] maze) {
int wallSizeX = 1;
int wallSizeZ= 1;
for (int i = 0; i &amp;lt; maze.GetLength(0); i++) {
for (int j = 0; j &amp;lt; maze.GetLength(1); j++) {
if (maze[i, j] == WALL) {
Instantiate(wall, new Vector3(wallSizeX * i, 0.25f, wallSizeZ * j), Quaternion.identity);
yield return new WaitForSeconds(0.1f);
}
}
}
}
private IEnumerator Go(Tuple&amp;lt;int, int&amp;gt;[] route) {
var player = Instantiate(playerPrefab, new Vector3(route[0].Item1, 1, route[0].Item2), Quaternion.identity);
for (int i = 1; i &amp;lt; route.Length; i++) {
player.transform.position = new Vector3(route[i].Item1, 1, route[i].Item2);
Debug.Log($&amp;quot;i:{i}, position({route[i].Item1}, 1, {route[i].Item2})&amp;quot;);
yield return new WaitForSeconds(0.5f);
}
}
}
&lt;/code>&lt;/pre>
&lt;/details>
&lt;br>
&lt;p>以下の画像はMazeクラスで作成した迷路をもとにUnity上にオブジェクトを配置した結果です。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="画像" srcset="
/post/syota-kawaguchi-2022/MazeGenerated_huf542778ba76cacef68703605ac9c3b33_26779_34d540d5f7af82bf0c04a4b570df0fe0.webp 400w,
/post/syota-kawaguchi-2022/MazeGenerated_huf542778ba76cacef68703605ac9c3b33_26779_066ccfc2768d8c52aa3e69468e8e6807.webp 760w,
/post/syota-kawaguchi-2022/MazeGenerated_huf542778ba76cacef68703605ac9c3b33_26779_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://blog.opuappnavi.com/post/syota-kawaguchi-2022/MazeGenerated_huf542778ba76cacef68703605ac9c3b33_26779_34d540d5f7af82bf0c04a4b570df0fe0.webp"
width="490"
height="446"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>今回は迷路を自動生成し、探索アルゴリズムを用いてゴールまでの経路を求めてみました。配列からUnityへの座標変換で少し手こずりましたがなんとか実装できたと思います。もし間違いやもっとこうしたほうが良いというアドバイスがありましたら、アプリNavi宛にご連絡頂けますと幸いです。
&lt;br>
&lt;br>
また今回のプロジェクトはGithubにあげておりますので、もしよろしければ御覧ください。
ここまで読んでいただきありがとうございました。&lt;/p>
&lt;p>&lt;a href="https://github.com/syota-kawaguchi/MazeSearch" target="_blank" rel="noopener">Github&lt;/a>&lt;/p></description></item></channel></rss>