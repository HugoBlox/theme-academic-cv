<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity | アプリNaviブログ</title>
    <link>https://blog.opuappnavi.com/tag/unity/</link>
      <atom:link href="https://blog.opuappnavi.com/tag/unity/index.xml" rel="self" type="application/rss+xml" />
    <description>Unity</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja</language><copyright>©Juris710  2020</copyright><lastBuildDate>Sat, 30 May 2020 16:45:03 +0900</lastBuildDate>
    <image>
      <url>https://blog.opuappnavi.com/images/icon_hude4548ff0fbec708553074fd5e552c37_155941_512x512_fill_lanczos_center_2.png</url>
      <title>Unity</title>
      <link>https://blog.opuappnavi.com/tag/unity/</link>
    </image>
    
    <item>
      <title>Unity WebGLのゲームをローカルでプレイする方法</title>
      <link>https://blog.opuappnavi.com/post/unity-webgl-locally/</link>
      <pubDate>Sat, 30 May 2020 16:45:03 +0900</pubDate>
      <guid>https://blog.opuappnavi.com/post/unity-webgl-locally/</guid>
      <description>&lt;p&gt;UnityでWebGLをプラットフォームに選択し、&lt;code&gt;Build And Run&lt;/code&gt;を押すと、ブラウザが起動して、作ったゲームをプレイすることができます。WebGLのビルドにはとても時間がかかるので、毎回ビルドするのではなく、一度ビルドしたゲームを複数回プレイしたくなります。ですが、ただ単に出力されたファイル&lt;code&gt;index.html&lt;/code&gt;を開くだけではプレイできません。&lt;br&gt;















&lt;figure id=&#34;figure-indexhtmlを開くとこのようなエラーメッセージが表示される&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./Unity_WebGL_Index_Html_Error.png&#34; data-caption=&#34;index.htmlを開くと、このようなエラーメッセージが表示される&#34;&gt;


  &lt;img src=&#34;./Unity_WebGL_Index_Html_Error.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    index.htmlを開くと、このようなエラーメッセージが表示される
  &lt;/figcaption&gt;


&lt;/figure&gt;

そこで、&lt;code&gt;Visual Studio Code&lt;/code&gt;(&lt;code&gt;VSCode&lt;/code&gt;)を使ってビルドしたゲームをプレイする方法を紹介します。&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;VSCode&lt;/code&gt;は &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;https://code.visualstudio.com/&lt;/a&gt; からダウンロードできます。
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id=&#34;1-拡張機能のインストール&#34;&gt;1. 拡張機能のインストール&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;VSCode&lt;/code&gt;を起動し、画面左のボタンを押して拡張機能パネルを開きます。















&lt;figure id=&#34;figure-拡張機能パネルを開くボタン&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./VSCode_Japanese.png&#34; data-caption=&#34;拡張機能パネルを開くボタン&#34;&gt;


  &lt;img src=&#34;./VSCode_Japanese.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    拡張機能パネルを開くボタン
  &lt;/figcaption&gt;


&lt;/figure&gt;

パネル上の検索ボックスに&lt;code&gt;live server&lt;/code&gt;と入力し、検索結果の一番上にある&lt;code&gt;Live Server&lt;/code&gt;をクリックします。&lt;code&gt;拡張機能:Live Server&lt;/code&gt;タブが開くので、&lt;code&gt;インストール&lt;/code&gt;をクリックします。















&lt;figure id=&#34;figure-拡張機能live-serverタブ&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./VSCode_Live_Server.png&#34; data-caption=&#34;「拡張機能：Live Server」タブ&#34;&gt;


  &lt;img src=&#34;./VSCode_Live_Server.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    「拡張機能：Live Server」タブ
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;補足-vscode日本語化&#34;&gt;(補足) VSCode日本語化&lt;/h2&gt;
&lt;p&gt;検索ボックスに&lt;code&gt;japanese&lt;/code&gt;と入力し、検索結果の一番上にある拡張機能&lt;code&gt;Japanese Language Pack for Visual Studio Code&lt;/code&gt;をインストールすることで日本語化できます。















&lt;figure id=&#34;figure-japanese-language-pack-for-visual-studio-codeインストール済み&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./VSCode_Japanese.png&#34; data-caption=&#34;「Japanese Language Pack for Visual Studio Code」(インストール済み)&#34;&gt;


  &lt;img src=&#34;./VSCode_Japanese.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    「Japanese Language Pack for Visual Studio Code」(インストール済み)
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;h1 id=&#34;2-ビルドしたゲームをvscodeで開く&#34;&gt;2. ビルドしたゲームをVSCodeで開く&lt;/h1&gt;
&lt;p&gt;メニューの&lt;code&gt;ファイル(F)&lt;/code&gt;から&lt;code&gt;フォルダを開く... Ctrl+K Ctrl+O&lt;/code&gt;をクリックします。フォルダ選択ダイアログが表示されるので、出力された&lt;code&gt;Build&lt;/code&gt;フォルダと&lt;code&gt;TemplateData&lt;/code&gt;フォルダ、&lt;code&gt;index.html&lt;/code&gt;ファイルのあるフォルダを選択します。&lt;/p&gt;
&lt;h1 id=&#34;3-ゲームをプレイ&#34;&gt;3. ゲームをプレイ&lt;/h1&gt;
&lt;p&gt;正しくフォルダを開けていると画面右下に&lt;code&gt;Go Live&lt;/code&gt;ボタンが表示されます。このボタンをクリックするとブラウザが起動し、ゲームをプレイできます。















&lt;figure id=&#34;figure-go-live-ボタン&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./Live_Server_Go_Live.png&#34; data-caption=&#34;Go Live ボタン&#34;&gt;


  &lt;img src=&#34;./Live_Server_Go_Live.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Go Live ボタン
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;code&gt;Go Live&lt;/code&gt;があった場所に表示される&lt;code&gt;Port:5050&lt;/code&gt;をクリックすれば、ブラウザでのプレイを停止できます。VSCodeを閉じれば自動的に停止するはずですが、プレイを止める際にはボタンを押すことをおすすめします。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>自己流ステージ作成方法</title>
      <link>https://blog.opuappnavi.com/post/stage-create/</link>
      <pubDate>Sat, 30 May 2020 10:17:55 +0900</pubDate>
      <guid>https://blog.opuappnavi.com/post/stage-create/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;
&lt;p&gt;初めまして、アプリNaviのヤマグチです。&lt;br&gt;
本日、府大バーチャル学祭開催に合わせ、『巡回！デリバリー屋さん』を
&lt;a href=&#34;http://appnavi.html.xdomain.jp/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;特設ページ&lt;/a&gt;にて公開させていただきました。遊んで、楽しんでもらえたのなら嬉しいです。&lt;/p&gt;
&lt;p&gt;今ゲームは2Dパズルアクションゲームで、ステージ作りにそれなりの時間を割きました。&lt;br&gt;
そこで、前半はステージ作りをするとき僕がどう考えていたかについて、後半はゲーム内に実装したステージを作った時に考えていたことの一部について書きます。&lt;br&gt;
あくまで僕自身の考え方であり他の方のものとは異なります。参考程度に読んでください。&lt;/p&gt;
&lt;h1 id=&#34;ステージ作成で大切なこと&#34;&gt;ステージ作成で大切なこと&lt;/h1&gt;
&lt;p&gt;この項では、僕がステージ作成で気にした方がいいと考えていることを書いていきます&lt;/p&gt;
&lt;h2 id=&#34;1-ステージに意図を持たせる&#34;&gt;1. ステージに意図を持たせる&lt;/h2&gt;
&lt;p&gt;皆さんはカードゲームをしたことがありますか。ない場合は武器やパーティをカスタム、編成するゲームを考えてください。カードゲームにおいて、何が一番いる能力だと思いますか。&lt;br&gt;
プレイング、読み、運、色々あると思います。&lt;br&gt;
僕の答えは構築力です。なぜ構築力なのかは、ここではあまり関係ないので省きますが、構築力が高いデッキはデッキ内のすべてのカードに採用する理由があります。完成された構築には意味のないカードはなく、製作者の意図、意志が反映されます。  限られたデッキ枚数に何を何枚採用するか。&lt;br&gt;
言い換えると、限られたスペースに何をどのくらい配置するか、何かに似てますね。&lt;br&gt;
そうです、ステージ作成です。特に今回のゲームでは、ステージは一画面に収まる量でなくてはダメでした。&lt;br&gt;
そこで、ステージの枠組みをどうするか、設置物をどこに置くか等、それぞれの配置に自分なりの考えを持つことを意識して作成しました。&lt;/p&gt;
&lt;h2 id=&#34;2-意味のないものを作る&#34;&gt;2. 意味のないものを作る&lt;/h2&gt;
&lt;p&gt;前項で書いたことに早速矛盾しました。&lt;br&gt;
しかし、意味のないものを作ることも必要です。遊んでくれる方は製作者の意図なんて知ったこっちゃありません。だからこそ、製作者にとっては無意味だとわかり切っているものにも意味があるんじゃないかと深読みしてくれます。  そうすれば、意味のないものを作ったつもりが意味のあるものを作れます。&lt;br&gt;
意図的に意味のないものを作ることでステージ全体に遊び心を与えることができるのです。&lt;/p&gt;
&lt;h2 id=&#34;3-ギミックの使い方を考える&#34;&gt;3. ギミックの使い方を考える&lt;/h2&gt;
&lt;p&gt;今回はステージの数が少なく、一つ一つのステージも小さいです。なので、できる限り同じ使い方でギミックを使わないことを気にしました。&lt;br&gt;
同じギミックでも、あるときはプラスの役割で使い、またある時はマイナスの役割で使うというようにギミックをより効果的に使うことを心がけました。&lt;/p&gt;
&lt;h2 id=&#34;4-自分が楽しむ&#34;&gt;4. 自分が楽しむ&lt;/h2&gt;
&lt;p&gt;これが一番大切な気がします。&lt;br&gt;
作った人が作ったものに対しての理解が最も深いはずです。その人が楽しめないものを他の人が楽しめるとは思えません。作ったステージを自分自身が楽しめるようになることが望ましいです。  作っている時は、作っているステージが面白いかどうかわからなくなってきます。しかし自分が面白いと思えば、少なくとも世界で誰も楽しめないステージではなくなります。&lt;br&gt;
僕は今回のゲーム内のステージでは僕が作ったステージが一番好きです。&lt;/p&gt;
&lt;h1 id=&#34;実際に作ったステージの解説&#34;&gt;実際に作ったステージの解説&lt;/h1&gt;
&lt;p&gt;この項では、僕が今回のゲームで作ったステージのちょっとした解説をしようと思います。&lt;br&gt;
この先、ステージ9のネタバレを含みますのでプレイした後に読むことをお勧めします。
&lt;details&gt;
    &lt;summary&gt;&lt;code&gt;以下ステージ9ネタバレ&lt;/code&gt;&lt;/summary&gt;
    &lt;figure &gt;
&lt;p&gt;&lt;a data-fancybox=&#34;&#34; href=&#34;./stage9.png&#34; &gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./stage9.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;1の意図は、ステージ全体にコンセプトを持たせることです。&lt;br&gt;
初めにコンセプトを決めておくことで僕自身の中で方向性がブレないようにしました。このステージ全体のコンセプトは「ステージ一周」でした。その時に右周りでも左回りでもクリアできるようにするということを目標にしました。&lt;br&gt;
ステージ全体を荷物を取るエリアでそれぞれ区分けし、各エリアには入り口と出口を作り、周回方向によって入り口、出口が入れ替わるような配置にしました。&lt;br&gt;
上の画像では、赤枠の示す上から落ちるブロックを擬似的な通行止めとして利用しています。&lt;/p&gt;
&lt;p&gt;2の意味のないものは、どっち周りでもクリアできるという要素です。&lt;br&gt;
別に両方から進める必要は全くありません。左回りの時は右回りのギミックは不必要で、右回りの時は左回りのギミックは不必要となります。&lt;br&gt;
ただ、これがあることでこのステージの面白さが出ていると考えています。&lt;/p&gt;
&lt;p&gt;3のギミックの使い方は、先ほども挙げた落ちるブロックによるステージの区切りです。&lt;br&gt;
他の僕の作ったステージでは、基本的にプレイヤーを倒すためだけのものでした。そこに他の役割である区切りという役割を持たせています。&lt;br&gt;
この使い方はプラスとマイナスの両方の使い方というわけではありませんが、違った使い方をした一例ではあります。&lt;/p&gt;
&lt;p&gt;4の自分が楽しむに関しては、作ってる間すごく楽しかったです。コンセプトを思いついてからは非常にスムーズにステージ作成をすることができました。&lt;/p&gt;
&lt;p&gt;以上が、僕の作ったステージのちょっとした解説になります。あまり話しすぎても面白くないのでこの辺りで終わります。&lt;/p&gt;

&lt;/details&gt;
&lt;/p&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに&lt;/h2&gt;
&lt;p&gt;読んでいただきありがとうございました。&lt;br&gt;
まさかブログまで書くことになると思っていませんでしたが、ゲームも含めてまあ良いものになったんじゃないかなあと思っています。&lt;br&gt;
最後に、ゲームを遊んでいただいた方、このブログを読んでいただいた方ありがとうございました。それではまた何かの機会に。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unity製ゲームをWebで共有する方法</title>
      <link>https://blog.opuappnavi.com/post/unity-github-pages/</link>
      <pubDate>Mon, 04 May 2020 20:17:22 +0900</pubDate>
      <guid>https://blog.opuappnavi.com/post/unity-github-pages/</guid>
      <description>&lt;p&gt;Gitに詳しくない人向けに書いています。Gitに詳しい人は&lt;code&gt;詳しくない人向け&lt;/code&gt;の部分は読まなくて大丈夫です。&lt;/p&gt;
&lt;h1 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Unity&lt;/li&gt;
&lt;li&gt;GitHub アカウント&lt;/li&gt;
&lt;li&gt;Git：
&lt;a href=&#34;https://git-scm.com/downloads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ここ&lt;/a&gt;からダウンロードできます&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-unityでゲームをビルドする&#34;&gt;1. Unityでゲームをビルドする&lt;/h1&gt;
&lt;h2 id=&#34;11-build-settingsを開く&#34;&gt;1.1 Build Settingsを開く&lt;/h2&gt;
&lt;p&gt;左上のメニューで&lt;code&gt;File&lt;/code&gt;&amp;gt;&lt;code&gt;Build Settings&lt;/code&gt;をクリックしてください。&lt;/p&gt;
&lt;h2 id=&#34;12-プラットフォームの変更&#34;&gt;1.2 プラットフォームの変更&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;WebGL&lt;/code&gt;を選択し、&lt;code&gt;Switch Platform&lt;/code&gt;をクリックしてください。&lt;/p&gt;
&lt;h2 id=&#34;13-ゲームをビルド&#34;&gt;1.3 ゲームをビルド&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Build&lt;/code&gt;をクリックしてください。ビルド先はどこでも構いません。私は&lt;code&gt;(プロジェクト名)/Builds/WebGL&lt;/code&gt;を選択しています。&lt;/p&gt;
&lt;h1 id=&#34;2-githubにアップロード&#34;&gt;2. GitHubにアップロード&lt;/h1&gt;
&lt;p&gt;ビルドの結果、以下の3つのファイルが生成されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Build&lt;/code&gt;フォルダ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TemplateData&lt;/code&gt;フォルダ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;ファイル&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのファイルをGitHubにアップロードします。&lt;br&gt;
&lt;details&gt;
    &lt;summary&gt;詳しくない人向け&lt;/summary&gt;
    &lt;h2 id=&#34;21-githubにサインイン&#34;&gt;2.1 GitHubにサインイン&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;にアクセスし、サインインしてください。&lt;/p&gt;
&lt;h2 id=&#34;22-新しいリポジトリの作成&#34;&gt;2.2 新しいリポジトリの作成&lt;/h2&gt;
&lt;figure class=&#34;left&#34; &gt;
&lt;p&gt;&lt;a data-fancybox=&#34;&#34; href=&#34;./GitHub_New_Repository.png&#34; &gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./GitHub_New_Repository.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Repositories&lt;/code&gt;の右にある&lt;code&gt;New&lt;/code&gt;をクリックしてください。&lt;/p&gt;
&lt;figure class=&#34;left&#34; &gt;
&lt;p&gt;&lt;a data-fancybox=&#34;&#34; href=&#34;./GitHub_New_Repository2.png&#34; &gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./GitHub_New_Repository2.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Repository name&lt;/code&gt;は任意の名前で構いませんが、ゲームをプレイする人も見ることができるので注意してください。&lt;br&gt;
&lt;code&gt;Public&lt;/code&gt;と&lt;code&gt;Private&lt;/code&gt;を選択できますが、&lt;code&gt;Public&lt;/code&gt;を選択してください。&lt;br&gt;
&lt;code&gt;Create repository&lt;/code&gt;を選択してリポジトリを作成してください。&lt;/p&gt;
&lt;figure class=&#34;left&#34; &gt;
&lt;p&gt;&lt;a data-fancybox=&#34;&#34; href=&#34;./GitHub_New_Repository3.png&#34; &gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./GitHub_New_Repository3.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;赤い枠で囲まれたボタンを押してください。左のURLがクリップボードにコピーされます。&lt;/p&gt;
&lt;h2 id=&#34;23-ファイルのアップロード&#34;&gt;2.3 ファイルのアップロード&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Git Bash&lt;/code&gt;を起動してください。
起動時のフォルダは&lt;code&gt;C:\Users\(ユーザー名)&lt;/code&gt;なので、ビルド結果があるフォルダに移動してください。&lt;code&gt;cd (フォルダ名)&lt;/code&gt;コマンドで移動できます。
移動したら、以下のコマンドを一行ずつ実行してください。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;Git Bash&lt;/code&gt;では&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;Insert&lt;/code&gt;で貼り付けができます
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
git add .
git commit -m &amp;quot;Initial Commit&amp;quot;
git remote add origin (先ほどコピーしたURL)
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/details&gt;
&lt;/p&gt;
&lt;h1 id=&#34;3-webにゲームを公開&#34;&gt;3. Webにゲームを公開&lt;/h1&gt;
&lt;p&gt;














&lt;figure class=&#34;left&#34; &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./GitHub_Pages.png&#34; &gt;


  &lt;img src=&#34;./GitHub_Pages.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;code&gt;Settings&lt;/code&gt;をクリックしてください。















&lt;figure class=&#34;left&#34; &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./GitHub_Pages2.png&#34; &gt;


  &lt;img src=&#34;./GitHub_Pages2.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;

スクロールし、&lt;code&gt;GitHub Pages&lt;/code&gt;の&lt;code&gt;Source&lt;/code&gt;の下にあるドロップダウンリストで&lt;code&gt;master branch&lt;/code&gt;を選択してください。&lt;/p&gt;
&lt;h1 id=&#34;公開したゲームをプレイ&#34;&gt;公開したゲームをプレイ&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;https://(ユーザー名).github.io/(リポジトリ名)/&lt;/code&gt;というURLにアクセスすると、作ったゲームをプレイすることができます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub for Unityの紹介</title>
      <link>https://blog.opuappnavi.com/post/github-for-unity/</link>
      <pubDate>Thu, 30 Apr 2020 20:18:25 +0900</pubDate>
      <guid>https://blog.opuappnavi.com/post/github-for-unity/</guid>
      <description>&lt;h1 id=&#34;使用したunityのバージョン&#34;&gt;使用したUnityのバージョン&lt;/h1&gt;
&lt;p&gt;Unity 2018.4.22f1&lt;/p&gt;
&lt;h1 id=&#34;導入方法&#34;&gt;導入方法&lt;/h1&gt;
&lt;p&gt;プロジェクトごとに行う必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Asset Storeから「GitHub for Unity」をインポート&lt;/li&gt;
&lt;li&gt;メニューで&lt;code&gt;Window&lt;/code&gt;&amp;gt;&lt;code&gt;GitHub&lt;/code&gt;を選択&lt;br&gt;















&lt;figure class=&#34;left&#34; &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./GitHub_Tab_Menu.png&#34; &gt;


  &lt;img src=&#34;./GitHub_Tab_Menu.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;

GitHubタブが開きます。















&lt;figure class=&#34;left&#34; &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./GitHub_Tab.png&#34; &gt;


  &lt;img src=&#34;./GitHub_Tab.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(初回のみ)&lt;/strong&gt; &lt;code&gt;Sign In&lt;/code&gt;をクリック&lt;br&gt;















&lt;figure class=&#34;left&#34; &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./GitHub_SignIn.png&#34; &gt;


  &lt;img src=&#34;./GitHub_SignIn.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;

ダイアログが表示されるので、GitHubアカウントでサインインしてください。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Initialize a git repository for this project&lt;/code&gt;をクリック&lt;br&gt;
少し待つと、タブの中身が変化します。&lt;br&gt;















&lt;figure class=&#34;left&#34; &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./GitHub_AfterGitInit.png&#34; &gt;


  &lt;img src=&#34;./GitHub_AfterGitInit.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;使い方&#34;&gt;使い方&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Changes&lt;/code&gt;を選択してください。前回保存した状態から変更があったファイルが一覧表示されます。















&lt;figure class=&#34;left&#34; &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./GitHub_Changes.png&#34; &gt;


  &lt;img src=&#34;./GitHub_Changes.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;変更を保存する&#34;&gt;変更を保存する&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;リストから保存したい変更をチェックマークをクリックして選択&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Commit summary&lt;/code&gt;に変更内容を記述&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Commit description&lt;/code&gt;に変更内容の詳細を記述（任意）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Commit to [master]&lt;/code&gt;をクリック&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;変更内容を確認する&#34;&gt;変更内容を確認する&lt;/h2&gt;
&lt;p&gt;前回保存した状態と現在の状態との差分を見ることができます。
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    差分を比較するソフトウェア(&lt;a href=&#34;https://forest.watch.impress.co.jp/library/software/winmerge/&#34;&gt;WinMerge&lt;/a&gt;など)をインストールする必要があります。
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;リストから差分を見たいファイルを右クリック&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Show Diff&lt;/code&gt;をクリック&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;変更を取り消す&#34;&gt;変更を取り消す&lt;/h3&gt;
&lt;p&gt;加えた変更を無かったことにして、前回保存した状態に戻すことができます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;リストから変更を取り消したいファイルを右クリック&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Discard&lt;/code&gt;をクリック&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;その他&#34;&gt;その他&lt;/h1&gt;
&lt;h2 id=&#34;比較ソフトウェアを変更したい&#34;&gt;比較ソフトウェアを変更したい&lt;/h2&gt;
&lt;p&gt;比較ソフトウェアが複数インストールされていて、変更したい場合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UnityのPreferenceを開く&lt;/li&gt;
&lt;li&gt;&lt;code&gt;External Tools&lt;/code&gt;を選択&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Revision Controll Diff/Merge&lt;/code&gt;でソフトウェアを選択&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;details&gt;
    &lt;summary&gt;GitHubやGitに詳しい人向け&lt;/summary&gt;
    &lt;h2 id=&#34;revert&#34;&gt;Revert&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;History&lt;/code&gt;を選択&lt;/li&gt;
&lt;li&gt;コミットを右クリック&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Revert&lt;/code&gt;をクリック&lt;/li&gt;
&lt;/ol&gt;

&lt;/details&gt;

</description>
    </item>
    
    <item>
      <title>Truck Quiz</title>
      <link>https://blog.opuappnavi.com/post/truck-quiz/</link>
      <pubDate>Tue, 28 Apr 2020 15:07:58 +0900</pubDate>
      <guid>https://blog.opuappnavi.com/post/truck-quiz/</guid>
      <description>&lt;p&gt;Unityについて勉強するため春休みの間に作成した、&amp;ldquo;Truck Quiz&amp;quot;を紹介します。&lt;/p&gt;
&lt;h1 id=&#34;ゲームの説明&#34;&gt;ゲームの説明&lt;/h1&gt;
&lt;p&gt;某有名クイズ番組のクイズを模したゲームです。
2択問題が5問出題されます。間違えてた時点でゲームオーバーです。
キーボード操作、タッチ操作の両方に対応しています。&lt;/p&gt;







&lt;div id=&#34;unity_webgl_0_1&#34; style=&#34;width: 100%; margin: 15px 0; background: white; border-radius: 15px;&#34;&gt;
  &lt;div style=&#34;position: relative;&#34;&gt;
    &lt;div id=&#34;unity_webgl_0_2&#34; style=&#34;height: 0;&#34;&gt;
      &lt;iframe id=&#34;unity_webgl_0_3&#34; allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
let w =  980 ; 
let h =  700 ; 
let url = &#34;https://juris710.github.io/TruckQuizSample/&#34;; 
document.getElementById(&#34;unity_webgl_0_2&#34;).style.paddingBottom = 100 * h / w + &#34;%&#34;;
document.getElementById(&#34;unity_webgl_0_3&#34;).src = url;
let set_width = function() {
  let client_w = document.getElementById(&#34;unity_webgl_0_2&#34;).clientWidth;
  let per = client_w / w;
  let rev = 100 / per;
  let iframe = document.getElementById(&#34;unity_webgl_0_3&#34;);
  iframe.height = rev + &#34;%&#34;;
  iframe.width = rev + &#34;%&#34;;
  iframe.style = &#34;position: absolute; top: 0; left: 0;  transform:scale(&#34; + per + &#34;);-o-transform:scale(&#34; + per + &#34;);-webkit-transform:scale(&#34; + per + &#34;);-moz-transform:scale(&#34; + per + &#34;);-ms-transform:scale(&#34; + per + &#34;);transform-origin:top left; border: 0;&#34;
}
set_width();
window.onresize = function(){ set_width(); };
&lt;/script&gt;
&lt;h1 id=&#34;工夫した点&#34;&gt;工夫した点&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;クイズの問題やゲーム設定をJSONファイルで管理&lt;/li&gt;
&lt;li&gt;画像のアスペクト比を維持するように&lt;/li&gt;
&lt;li&gt;解答の取り消し、問題の差し替え機能実装&lt;/li&gt;
&lt;li&gt;ゲーム内の文章ほぼ全てにフリガナを付ける（フリガナ表示・非表示切り替え可能）&lt;/li&gt;
&lt;li&gt;問題の解説に文章だけでなく選択肢の画像も利用できるように&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;実装の概説&#34;&gt;実装の概説&lt;/h1&gt;
&lt;details&gt;
    &lt;summary&gt;Unityに詳しい人向け&lt;/summary&gt;
    &amp;ldquo;Truck Quiz&amp;quot;を主に動かしているのは&lt;code&gt;StateMachineBehaviour&lt;/code&gt;です。&lt;code&gt;StateMachineBehaviour&lt;/code&gt;について軽く説明すると、アニメーションの開始時、終了時、Update時(MonoBehaviourのUpdate関数同様、アニメーションの再生中定期的に呼ばれる)に任意の処理を挟むことのできるクラスです。&lt;br&gt;
トロッコとUIで2つのAnimatorがあり、「選択肢を選んだアニメーション」が終了したら「トロッコが曲がるアニメーション」を開始する、みたいな処理をGameManagerクラス内で実装しています。
&lt;/details&gt;

&lt;h1 id=&#34;改良予定&#34;&gt;改良予定&lt;/h1&gt;
&lt;details&gt;
    &lt;summary&gt;Unityに詳しい人向け&lt;/summary&gt;
    &lt;h2 id=&#34;assetbundleを使用した画像管理&#34;&gt;AssetBundleを使用した画像管理&lt;/h2&gt;
&lt;p&gt;現状Resourceクラスで問題の画像を管理していますが、公式が「Resourceクラスは使うな」と言っているので、AssetBundleへの切替を検討しています&lt;/p&gt;
&lt;h2 id=&#34;unityバージョンのアップグレード&#34;&gt;Unityバージョンのアップグレード&lt;/h2&gt;
&lt;p&gt;現在使用しているUnityのバージョンは2018ですが、2018ではpreview版である&lt;code&gt;Input System&lt;/code&gt;を使用したいため、2019へのアップグレードを検討しています。&lt;/p&gt;
&lt;h2 id=&#34;デザイン面の改善&#34;&gt;デザイン面の改善&lt;/h2&gt;
&lt;p&gt;UIデザインの改善を検討しています。&lt;/p&gt;

&lt;/details&gt;

</description>
    </item>
    
  </channel>
</rss>
