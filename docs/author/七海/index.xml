<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>七海 | アプリNaviブログ</title>
    <link>https://blog.opuappnavi.com/author/%E4%B8%83%E6%B5%B7/</link>
      <atom:link href="https://blog.opuappnavi.com/author/%E4%B8%83%E6%B5%B7/index.xml" rel="self" type="application/rss+xml" />
    <description>七海</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja</language><copyright>©Juris710  2020</copyright>
    <image>
      <url>https://blog.opuappnavi.com/images/icon_hude4548ff0fbec708553074fd5e552c37_155941_512x512_fill_lanczos_center_2.png</url>
      <title>七海</title>
      <link>https://blog.opuappnavi.com/author/%E4%B8%83%E6%B5%B7/</link>
    </image>
    
    <item>
      <title>[Unity] 面倒なエフェクトはShaderGraphで作ろう</title>
      <link>https://blog.opuappnavi.com/post/shadergraph-introduction/</link>
      <pubDate>Mon, 06 Jul 2020 15:31:53 +0900</pubDate>
      <guid>https://blog.opuappnavi.com/post/shadergraph-introduction/</guid>
      <description>&lt;h1 id=&#34;1-はじめに&#34;&gt;1. はじめに&lt;/h1&gt;
&lt;p&gt;Unityユーザーの9割くらいは &lt;strong&gt;”Shader”&lt;/strong&gt; という文字を見るとアレルギー反応を起こすことでしょう。Shaderプログラムの中身を編集してオブジェクトの質感を変えたりアニメーションを持たせたりするのは骨が折れますし、CG自体の知識が無いとエラーから抜け出すのも困難です。構文の見た目も結構グロテスクなため、素人にとっては到底手に追えない代物と化しています。かといってUnity C#で実装するのもややこしいです…。&lt;/p&gt;
&lt;p&gt;そこで今回紹介したいのが &lt;strong&gt;&amp;ldquo;ShaderGraph&amp;rdquo;&lt;/strong&gt; というShaderエディタです。これはノードと呼ばれる演算ブロックを線で結んでいくだけで簡単にエフェクトや制御を実装できる優れモノで、Unity 2018 以降のバージョンで利用できます。オモチャ感覚で操作できるため、Unity始めたての人でも扱えるほど簡単な点が魅力的です。&lt;/p&gt;
&lt;h1 id=&#34;2-私の開発環境&#34;&gt;2. 私の開発環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PC &amp;hellip; ASUS ZENBOOK 13 (
&lt;a href=&#34;https://www.asus.com/jp/Laptops/ASUS-ZenBook-13-UX331UN/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;スペック&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OS &amp;hellip; Windows 10 home&lt;/li&gt;
&lt;li&gt;Unity version &amp;hellip; 2019.3&lt;/li&gt;
&lt;li&gt;Unity Projectテンプレート &amp;hellip; Universal Render Pipeline(URP)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-shadergraphの導入&#34;&gt;3. ShaderGraphの導入&lt;/h1&gt;
&lt;h2 id=&#34;3-1-shadergraphの動作環境&#34;&gt;3-1. ShaderGraphの動作環境&lt;/h2&gt;
&lt;p&gt;ShaderGraphを使うにあたってひとつだけ制約があります。それは、UnityのProject作成時のテンプレート選択で &lt;strong&gt;&amp;ldquo;Universal RP(URP)&amp;quot;&lt;/strong&gt; または &lt;strong&gt;&amp;ldquo;High Definition RP(HDRP)&amp;quot;&lt;/strong&gt; を指定する必要があることです。Unity 2019.3より前だとURPはLightweight RP(LWRP)というテンプレート名で備わっていますが、中身はほとんど同じものです。&lt;/p&gt;
&lt;h2 id=&#34;3-2-projectの作成&#34;&gt;3-2. Projectの作成&lt;/h2&gt;
&lt;p&gt;軽量のため今回はURPを使います。まずURPテンプレートでProjectを作成し、次に [Window→Package Manager] に飛んでUniversal RPとShaderGraphをInstallしてください。既にインストールされている場合 (ボタンにUp to dateと表示されている場合) は再インストールしなくても大丈夫です。&lt;/p&gt;


















&lt;figure id=&#34;figure-urpテンプレートの作成&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./Temp_URP.png&#34; data-caption=&#34;URPテンプレートの作成&#34;&gt;


  &lt;img src=&#34;./Temp_URP.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    URPテンプレートの作成
  &lt;/figcaption&gt;


&lt;/figure&gt;



















&lt;figure id=&#34;figure-urpのインストール画面&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./Install_URP.png&#34; data-caption=&#34;URPのインストール画面&#34;&gt;


  &lt;img src=&#34;./Install_URP.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    URPのインストール画面
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Unity 2019.3より前のバージョンだとLightweight RPという名前になっているので注意です。LWRPの導入手順については先人が投稿したページを参照してください。LWRPとShaderGraphのインストールができたらOKです。&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://nn-hokuson.hatenablog.com/entry/2018/05/08/212502&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【Unityシェーダ】Shader Graph超入門&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これでセットアップが完了しました。次は私と一緒にShaderGraphを触っていきましょう。&lt;/p&gt;
&lt;h1 id=&#34;4-shadergraphで簡単なuvアニメーションを実装してみよう&#34;&gt;4. ShaderGraphで簡単なUVアニメーションを実装してみよう&lt;/h1&gt;
&lt;p&gt;ここではチュートリアルとしてObjectの色を七色に変化させてみます。(プリセットのSceneはごちゃごちゃしているので新規Sceneを作って作業することをお勧めします)&lt;/p&gt;


















&lt;figure id=&#34;figure-制作物見本&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./mihon.gif&#34; data-caption=&#34;制作物見本&#34;&gt;


  &lt;img src=&#34;./mihon.gif&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    制作物見本
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;4-1-shadergraphの作成と画面説明&#34;&gt;4-1. ShaderGraphの作成と画面説明&lt;/h2&gt;
&lt;p&gt;ShaderGraphのEditorは、Projectウィンドウから[Shader→Unlit Graph]を選択することで作成できます。ShaderGraphの種類はいくつかありますが、ここではLightに依存せず一番軽量なUnlitを用います。生成されたEditorを開いてみると下のような画面が表示されます。&lt;/p&gt;


















&lt;figure id=&#34;figure-shadergraphの作成&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./ShaderGraph_create.png&#34; data-caption=&#34;ShaderGraphの作成&#34;&gt;


  &lt;img src=&#34;./ShaderGraph_create.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    ShaderGraphの作成
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;①ではShaderGraphの名前を変更できたり変数を管理できます。②の領域ではノードの編集ができて、出力は④のプレビューでリアルタイムに確認できます。③のマスターノードは色々な項目がありますが、今回はColorのみを触ります。&lt;/p&gt;
&lt;p&gt;また、Editorの基本操作としては下の4つを覚えておけばとりあえず十分です。覚えていなくても感覚的な操作で多分なんとかなります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拡大縮小: [マウスのホイールを回転]&lt;/li&gt;
&lt;li&gt;スクロール: [Alt + マウス左ドラッグ] or [マウスのホイールをドラッグ]&lt;/li&gt;
&lt;li&gt;ノード作成: [右クリック→Create Node]&lt;/li&gt;
&lt;li&gt;ノード接続: [〇アイコンを左ドラッグし、接続先の〇アイコンまで線を伸ばす]&lt;/li&gt;
&lt;li&gt;接続線の削除: [線を右クリック→Delete]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-2-今回使うテクスチャ&#34;&gt;4-2. 今回使うテクスチャ&lt;/h2&gt;
&lt;p&gt;テクスチャは画像編集ソフトGIMPを使って作成しました。上手いことやれば素材画像ごとShaderGraphで作れたかもですが、私の知識不足により別のソフトに頼ることにしました。以下の画像ファイルをProjectの適当なフォルダに入れてください。&lt;/p&gt;


















&lt;figure id=&#34;figure-虹色テクスチャの素材画像&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./Rainbow.jpg&#34; data-caption=&#34;虹色テクスチャの素材画像&#34;&gt;


  &lt;img src=&#34;./Rainbow.jpg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    虹色テクスチャの素材画像
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;参考: 
&lt;a href=&#34;https://sore-zettai.com/gimp-rainbow/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;フリーの画像編集ソフト GIMP を使って、レインボーグラデーションを作る方法&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-3-ノードの追加&#34;&gt;4-3. ノードの追加&lt;/h2&gt;
&lt;p&gt;完成イメージの要件は次の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虹色のテクスチャが貼ってある&lt;/li&gt;
&lt;li&gt;テクスチャがスクロールする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テクスチャのスクロールはTiling And Offset というノード(UVスクロール)で実装したいと思います。スクロール用の変数にはTime ノードを、テクスチャの取得にはSample Texture 2D ノードを使用します。右クリックを使って以下のようにノードを追加してください。&lt;/p&gt;


















&lt;figure id=&#34;figure-ノードの追加&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./Node_add.gif&#34; data-caption=&#34;ノードの追加&#34;&gt;


  &lt;img src=&#34;./Node_add.gif&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    ノードの追加
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;ノードを追加できたら線を繋いでいきましょう。ノードの各項目の説明は割愛しますが、gifの通りに繋ぐとテクスチャがスクロールしてくれます。&lt;/p&gt;


















&lt;figure id=&#34;figure-ノードの接続&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./Node_connection.gif&#34; data-caption=&#34;ノードの接続&#34;&gt;


  &lt;img src=&#34;./Node_connection.gif&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    ノードの接続
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;4-4-materialへの出力方法&#34;&gt;4-4. Materialへの出力方法&lt;/h2&gt;
&lt;p&gt;ShaderGraphで編集した内容をMaterialへ適用するには以下のように操作します。Save Assetを押してEditor画面から離脱し、ShaderGraphを右クリックして[Create→Material]を選択すれば完了です。&lt;/p&gt;


















&lt;figure id=&#34;figure-materialの出力&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./Rainbow.gif&#34; data-caption=&#34;Materialの出力&#34;&gt;


  &lt;img src=&#34;./Rainbow.gif&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Materialの出力
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Objectは虹色になりましたか？成功したら次はスクロール速度を変えてみます。速度を可変にするには、変数としてSliderノードを追加し、さらに変数を反映させるためにMultiplyノード(掛け算)を追加します。Multiplyノードの入力にTimeノードとSliderノードを追加すれば実装完了です。&lt;/p&gt;


















&lt;figure id=&#34;figure-スクロールスピードの変更&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./Rainbow_speed.gif&#34; data-caption=&#34;スクロールスピードの変更&#34;&gt;


  &lt;img src=&#34;./Rainbow_speed.gif&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    スクロールスピードの変更
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;4-5-変数をmaterial上で変更する方法&#34;&gt;4-5. 変数をMaterial上で変更する方法&lt;/h2&gt;
&lt;p&gt;先程はEditor上でスクロールを設定していましたが、実用面を考えるとこれではやや不便です。そこで、次はEditorを開かなくてもMaterialのInspector上で速度を扱えるようにしたいと思います。&lt;/p&gt;
&lt;p&gt;やり方は、Inspectorで参照したいノード(ここではSliderノード)を選択し、右クリックから[Convert to Property]を選択するだけです。すると、MaterialのInspector上でSliderの項目が追加されます。とても簡単ですね。20秒でできてしまいました。&lt;/p&gt;


















&lt;figure id=&#34;figure-inspector上での変数参照方法&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./Rainbow_speed_Inspector.gif&#34; data-caption=&#34;Inspector上での変数参照方法&#34;&gt;


  &lt;img src=&#34;./Rainbow_speed_Inspector.gif&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Inspector上での変数参照方法
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h1 id=&#34;5-まとめ&#34;&gt;5. まとめ&lt;/h1&gt;
&lt;p&gt;今回はShaderGraphについて紹介しました。ノードを作って繋ぐだけで簡単にMaterialの制御を実装でき、リアルタイムにグラフィックを確認できるため頭のイメージを具現化しやすいです。貴方にその有難みを少しでも体感して頂けたなら投稿者冥利に尽きます。&lt;/p&gt;


















&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./appnavi.gif&#34; &gt;


  &lt;img src=&#34;./appnavi.gif&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;最後に、先人たちがShaderGraphで作った作品をいくつか紹介します。「こんなこともできるんだな」と感じてインスピレーションが膨らむはずです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.matatabi-ux.com/entry/2018/12/13/100000&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unity のシェーダーグラフで描画する軌跡をアニメーションさせる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://bravememo.hatenablog.com/entry/2020/05/13/111657&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【Unity】ShaderGraphでLoadingっぽいアイコンを作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://qiita.com/o_s_t/items/c546962bbd9f064c9908&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UnityのShaderGraphでPBRシェーダーを作ってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Youtubeでも数々の素晴らしい動画がアップロードされているので一度検索してみてください。&lt;/p&gt;
&lt;h1 id=&#34;参考にした書籍&#34;&gt;参考にした書籍&lt;/h1&gt;
&lt;p&gt;森 哲哉, 秋山 高廣, 他, &amp;ldquo;Unity デザイナーズ・バイブル&amp;rdquo;, ボーンデジタル社(2020).

&lt;a href=&#34;https://www.borndigital.co.jp/book/18319.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unity デザイナーズ・バイブル&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
