<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>七海 | アプリNaviブログ</title><link>https://blog.opuappnavi.com/author/%E4%B8%83%E6%B5%B7/</link><atom:link href="https://blog.opuappnavi.com/author/%E4%B8%83%E6%B5%B7/index.xml" rel="self" type="application/rss+xml"/><description>七海</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja</language><copyright>©Juris710 2020</copyright><image><url>https://blog.opuappnavi.com/images/icon_hude4548ff0fbec708553074fd5e552c37_155941_512x512_fill_lanczos_center_2.png</url><title>七海</title><link>https://blog.opuappnavi.com/author/%E4%B8%83%E6%B5%B7/</link></image><item><title>[Unity] 面倒なエフェクトはShaderGraphで作ろう</title><link>https://blog.opuappnavi.com/post/shadergraph-introduction/</link><pubDate>Mon, 06 Jul 2020 15:31:53 +0900</pubDate><guid>https://blog.opuappnavi.com/post/shadergraph-introduction/</guid><description>&lt;h1 id="1-はじめに">1. はじめに&lt;/h1>
&lt;p>Unityユーザーの9割くらいは &lt;strong>”Shader”&lt;/strong> という文字を見るとアレルギー反応を起こすことでしょう。Shaderプログラムの中身を編集してオブジェクトの質感を変えたりアニメーションを持たせたりするのは骨が折れますし、CG自体の知識が無いとエラーから抜け出すのも困難です。構文の見た目も結構グロテスクなため、素人にとっては到底手に追えない代物と化しています。かといってUnity C#で実装するのもややこしいです…。&lt;/p>
&lt;p>そこで今回紹介したいのが &lt;strong>&amp;ldquo;ShaderGraph&amp;rdquo;&lt;/strong> というShaderエディタです。これはノードと呼ばれる演算ブロックを線で結んでいくだけで簡単にエフェクトや制御を実装できる優れモノで、Unity 2018 以降のバージョンで利用できます。オモチャ感覚で操作できるため、Unity始めたての人でも扱えるほど簡単な点が魅力的です。&lt;/p>
&lt;h1 id="2-私の開発環境">2. 私の開発環境&lt;/h1>
&lt;ul>
&lt;li>PC &amp;hellip; ASUS ZENBOOK 13 (
&lt;a href="https://www.asus.com/jp/Laptops/ASUS-ZenBook-13-UX331UN/" target="_blank" rel="noopener">スペック&lt;/a>)&lt;/li>
&lt;li>OS &amp;hellip; Windows 10 home&lt;/li>
&lt;li>Unity version &amp;hellip; 2019.3&lt;/li>
&lt;li>Unity Projectテンプレート &amp;hellip; Universal Render Pipeline(URP)&lt;/li>
&lt;/ul>
&lt;h1 id="3-shadergraphの導入">3. ShaderGraphの導入&lt;/h1>
&lt;h2 id="3-1-shadergraphの動作環境">3-1. ShaderGraphの動作環境&lt;/h2>
&lt;p>ShaderGraphを使うにあたってひとつだけ制約があります。それは、UnityのProject作成時のテンプレート選択で &lt;strong>&amp;ldquo;Universal RP(URP)&amp;quot;&lt;/strong> または &lt;strong>&amp;ldquo;High Definition RP(HDRP)&amp;quot;&lt;/strong> を指定する必要があることです。Unity 2019.3より前だとURPはLightweight RP(LWRP)というテンプレート名で備わっていますが、中身はほとんど同じものです。&lt;/p>
&lt;h2 id="3-2-projectの作成">3-2. Projectの作成&lt;/h2>
&lt;p>軽量のため今回はURPを使います。まずURPテンプレートでProjectを作成し、次に [Window→Package Manager] に飛んでUniversal RPとShaderGraphをInstallしてください。既にインストールされている場合 (ボタンにUp to dateと表示されている場合) は再インストールしなくても大丈夫です。&lt;/p>
&lt;figure id="figure-urpテンプレートの作成">
&lt;a data-fancybox="" href="./Temp_URP.png" data-caption="URPテンプレートの作成">
&lt;img src="./Temp_URP.png" alt="" >
&lt;/a>
&lt;figcaption>
URPテンプレートの作成
&lt;/figcaption>
&lt;/figure>
&lt;figure id="figure-urpのインストール画面">
&lt;a data-fancybox="" href="./Install_URP.png" data-caption="URPのインストール画面">
&lt;img src="./Install_URP.png" alt="" >
&lt;/a>
&lt;figcaption>
URPのインストール画面
&lt;/figcaption>
&lt;/figure>
&lt;p>Unity 2019.3より前のバージョンだとLightweight RPという名前になっているので注意です。LWRPの導入手順については先人が投稿したページを参照してください。LWRPとShaderGraphのインストールができたらOKです。&lt;/p>
&lt;p>
&lt;a href="http://nn-hokuson.hatenablog.com/entry/2018/05/08/212502" target="_blank" rel="noopener">【Unityシェーダ】Shader Graph超入門&lt;/a>&lt;/p>
&lt;p>これでセットアップが完了しました。次は私と一緒にShaderGraphを触っていきましょう。&lt;/p>
&lt;h1 id="4-shadergraphで簡単なuvアニメーションを実装してみよう">4. ShaderGraphで簡単なUVアニメーションを実装してみよう&lt;/h1>
&lt;p>ここではチュートリアルとしてObjectの色を七色に変化させてみます。(プリセットのSceneはごちゃごちゃしているので新規Sceneを作って作業することをお勧めします)&lt;/p>
&lt;figure id="figure-制作物見本">
&lt;a data-fancybox="" href="./mihon.gif" data-caption="制作物見本">
&lt;img src="./mihon.gif" alt="" >
&lt;/a>
&lt;figcaption>
制作物見本
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="4-1-shadergraphの作成と画面説明">4-1. ShaderGraphの作成と画面説明&lt;/h2>
&lt;p>ShaderGraphのEditorは、Projectウィンドウから[Shader→Unlit Graph]を選択することで作成できます。ShaderGraphの種類はいくつかありますが、ここではLightに依存せず一番軽量なUnlitを用います。生成されたEditorを開いてみると下のような画面が表示されます。&lt;/p>
&lt;figure id="figure-shadergraphの作成">
&lt;a data-fancybox="" href="./ShaderGraph_create.png" data-caption="ShaderGraphの作成">
&lt;img src="./ShaderGraph_create.png" alt="" >
&lt;/a>
&lt;figcaption>
ShaderGraphの作成
&lt;/figcaption>
&lt;/figure>
&lt;p>①ではShaderGraphの名前を変更できたり変数を管理できます。②の領域ではノードの編集ができて、出力は④のプレビューでリアルタイムに確認できます。③のマスターノードは色々な項目がありますが、今回はColorのみを触ります。&lt;/p>
&lt;p>また、Editorの基本操作としては下の4つを覚えておけばとりあえず十分です。覚えていなくても感覚的な操作で多分なんとかなります。&lt;/p>
&lt;ul>
&lt;li>拡大縮小: [マウスのホイールを回転]&lt;/li>
&lt;li>スクロール: [Alt + マウス左ドラッグ] or [マウスのホイールをドラッグ]&lt;/li>
&lt;li>ノード作成: [右クリック→Create Node]&lt;/li>
&lt;li>ノード接続: [〇アイコンを左ドラッグし、接続先の〇アイコンまで線を伸ばす]&lt;/li>
&lt;li>接続線の削除: [線を右クリック→Delete]&lt;/li>
&lt;/ul>
&lt;h2 id="4-2-今回使うテクスチャ">4-2. 今回使うテクスチャ&lt;/h2>
&lt;p>テクスチャは画像編集ソフトGIMPを使って作成しました。上手いことやれば素材画像ごとShaderGraphで作れたかもですが、私の知識不足により別のソフトに頼ることにしました。以下の画像ファイルをProjectの適当なフォルダに入れてください。&lt;/p>
&lt;figure id="figure-虹色テクスチャの素材画像">
&lt;a data-fancybox="" href="./Rainbow.jpg" data-caption="虹色テクスチャの素材画像">
&lt;img src="./Rainbow.jpg" alt="" >
&lt;/a>
&lt;figcaption>
虹色テクスチャの素材画像
&lt;/figcaption>
&lt;/figure>
&lt;p>参考:
&lt;a href="https://sore-zettai.com/gimp-rainbow/" target="_blank" rel="noopener">フリーの画像編集ソフト GIMP を使って、レインボーグラデーションを作る方法&lt;/a>&lt;/p>
&lt;h2 id="4-3-ノードの追加">4-3. ノードの追加&lt;/h2>
&lt;p>完成イメージの要件は次の通り。&lt;/p>
&lt;ul>
&lt;li>虹色のテクスチャが貼ってある&lt;/li>
&lt;li>テクスチャがスクロールする&lt;/li>
&lt;/ul>
&lt;p>テクスチャのスクロールはTiling And Offset というノード(UVスクロール)で実装したいと思います。スクロール用の変数にはTime ノードを、テクスチャの取得にはSample Texture 2D ノードを使用します。右クリックを使って以下のようにノードを追加してください。&lt;/p>
&lt;figure id="figure-ノードの追加">
&lt;a data-fancybox="" href="./Node_add.gif" data-caption="ノードの追加">
&lt;img src="./Node_add.gif" alt="" >
&lt;/a>
&lt;figcaption>
ノードの追加
&lt;/figcaption>
&lt;/figure>
&lt;p>ノードを追加できたら線を繋いでいきましょう。ノードの各項目の説明は割愛しますが、gifの通りに繋ぐとテクスチャがスクロールしてくれます。&lt;/p>
&lt;figure id="figure-ノードの接続">
&lt;a data-fancybox="" href="./Node_connection.gif" data-caption="ノードの接続">
&lt;img src="./Node_connection.gif" alt="" >
&lt;/a>
&lt;figcaption>
ノードの接続
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="4-4-materialへの出力方法">4-4. Materialへの出力方法&lt;/h2>
&lt;p>ShaderGraphで編集した内容をMaterialへ適用するには以下のように操作します。Save Assetを押してEditor画面から離脱し、ShaderGraphを右クリックして[Create→Material]を選択すれば完了です。&lt;/p>
&lt;figure id="figure-materialの出力">
&lt;a data-fancybox="" href="./Rainbow.gif" data-caption="Materialの出力">
&lt;img src="./Rainbow.gif" alt="" >
&lt;/a>
&lt;figcaption>
Materialの出力
&lt;/figcaption>
&lt;/figure>
&lt;p>Objectは虹色になりましたか？成功したら次はスクロール速度を変えてみます。速度を可変にするには、変数としてSliderノードを追加し、さらに変数を反映させるためにMultiplyノード(掛け算)を追加します。Multiplyノードの入力にTimeノードとSliderノードを追加すれば実装完了です。&lt;/p>
&lt;figure id="figure-スクロールスピードの変更">
&lt;a data-fancybox="" href="./Rainbow_speed.gif" data-caption="スクロールスピードの変更">
&lt;img src="./Rainbow_speed.gif" alt="" >
&lt;/a>
&lt;figcaption>
スクロールスピードの変更
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="4-5-変数をmaterial上で変更する方法">4-5. 変数をMaterial上で変更する方法&lt;/h2>
&lt;p>先程はEditor上でスクロールを設定していましたが、実用面を考えるとこれではやや不便です。そこで、次はEditorを開かなくてもMaterialのInspector上で速度を扱えるようにしたいと思います。&lt;/p>
&lt;p>やり方は、Inspectorで参照したいノード(ここではSliderノード)を選択し、右クリックから[Convert to Property]を選択するだけです。すると、MaterialのInspector上でSliderの項目が追加されます。とても簡単ですね。20秒でできてしまいました。&lt;/p>
&lt;figure id="figure-inspector上での変数参照方法">
&lt;a data-fancybox="" href="./Rainbow_speed_Inspector.gif" data-caption="Inspector上での変数参照方法">
&lt;img src="./Rainbow_speed_Inspector.gif" alt="" >
&lt;/a>
&lt;figcaption>
Inspector上での変数参照方法
&lt;/figcaption>
&lt;/figure>
&lt;h1 id="5-まとめ">5. まとめ&lt;/h1>
&lt;p>今回はShaderGraphについて紹介しました。ノードを作って繋ぐだけで簡単にMaterialの制御を実装でき、リアルタイムにグラフィックを確認できるため頭のイメージを具現化しやすいです。貴方にその有難みを少しでも体感して頂けたなら投稿者冥利に尽きます。&lt;/p>
&lt;figure >
&lt;a data-fancybox="" href="./appnavi.gif" >
&lt;img src="./appnavi.gif" alt="" >
&lt;/a>
&lt;/figure>
&lt;p>最後に、先人たちがShaderGraphで作った作品をいくつか紹介します。「こんなこともできるんだな」と感じてインスピレーションが膨らむはずです。&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://www.matatabi-ux.com/entry/2018/12/13/100000" target="_blank" rel="noopener">Unity のシェーダーグラフで描画する軌跡をアニメーションさせる&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://bravememo.hatenablog.com/entry/2020/05/13/111657" target="_blank" rel="noopener">【Unity】ShaderGraphでLoadingっぽいアイコンを作る&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://qiita.com/o_s_t/items/c546962bbd9f064c9908" target="_blank" rel="noopener">UnityのShaderGraphでPBRシェーダーを作ってみる&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Youtubeでも数々の素晴らしい動画がアップロードされているので一度検索してみてください。&lt;/p>
&lt;h1 id="参考にした書籍">参考にした書籍&lt;/h1>
&lt;p>森 哲哉, 秋山 高廣, 他, &amp;ldquo;Unity デザイナーズ・バイブル&amp;rdquo;, ボーンデジタル社(2020).
&lt;a href="https://www.borndigital.co.jp/book/18319.html" target="_blank" rel="noopener">Unity デザイナーズ・バイブル&lt;/a>&lt;/p></description></item></channel></rss>